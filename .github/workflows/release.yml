name: Build & Release

on:
  push:
    branches:
      - master

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: maven

      - name: Build with Maven
        run: mvn -B package

      - name: Extract project version
        id: version
        run: |
          VERSION_RAW=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)

          # If you ever have spaces or other disallowed chars in VERSION_RAW uncomment sanitation:
          # SAFE_VERSION=$(echo "$VERSION_RAW" | tr ' ' '_' )
          SAFE_VERSION="$VERSION_RAW"

          echo "Project version: $SAFE_VERSION"
          echo "VERSION=$SAFE_VERSION" >> "$GITHUB_ENV"
          echo "version=$SAFE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Determine next build number for this version
        id: build_number
        run: |
          set -euo pipefail
          git fetch --tags --quiet

          VERSION="${VERSION}"

          # List only tags that begin EXACTLY with "<version>-b" and then digits, no extra suffix.
          # We avoid glob pitfalls by post-filtering.
          MATCHING_TAGS=$(git tag --list "${VERSION}-b*" | grep -E "^${VERSION}-b[0-9]+$" || true)

          if [ -z "$MATCHING_TAGS" ]; then
            BUILD_NUMBER=1
          else
            LAST_NUM=$(echo "$MATCHING_TAGS" | sed -E "s/^${VERSION}-b([0-9]+)$/\1/" | sort -n | tail -1)
            BUILD_NUMBER=$((LAST_NUM + 1))
          fi

          echo "Determined build number: $BUILD_NUMBER for version: $VERSION"
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> "$GITHUB_ENV"
          echo "build_number=$BUILD_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Select primary (unshaded) JAR
        id: jar
        run: |
          set -euo pipefail
            # Strategy:
            # 1. List all jars.
            # 2. Drop any *-shaded.jar
            # 3. Drop any original-*.jar
            # 4. Expect exactly one remaining candidate.
          ALL_JARS=(target/*.jar)
          FILTERED=()
          for f in "${ALL_JARS[@]}"; do
            bn=$(basename "$f")
            if [[ "$bn" == *"-shaded.jar" ]]; then
              continue
            fi
            if [[ "$bn" == original-* ]]; then
              continue
            fi
            FILTERED+=("$f")
          done

          if [ ${#FILTERED[@]} -eq 0 ]; then
            echo "No primary (unshaded) JAR found after filtering." >&2
            echo "Found jars:"
            ls -1 target/*.jar || true
            exit 1
          elif [ ${#FILTERED[@]} -gt 1 ]; then
            echo "Multiple candidate jars found; refine your filter logic." >&2
            printf '%s\n' "${FILTERED[@]}"
            exit 1
          fi

          JAR_FILE="${FILTERED[0]}"
          echo "Chosen JAR: $JAR_FILE"
          echo "JAR_FILE=$JAR_FILE" >> "$GITHUB_ENV"
          echo "jar_file=$JAR_FILE" >> "$GITHUB_OUTPUT"

      - name: Create and push tag (format <version>-b<number>)
        id: tag
        run: |
          set -euo pipefail
          TAG="${VERSION}-b${BUILD_NUMBER}"

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists; will reuse."
          else
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag "$TAG"
            git push origin "$TAG"
            echo "Created tag $TAG"
          fi

          echo "TAG=$TAG" >> "$GITHUB_ENV"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          files: ${{ env.JAR_FILE }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}